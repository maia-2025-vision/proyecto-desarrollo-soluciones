[project]
name = "cow-detect"
version = "0.0.1"

authors = [
    # TODO: fill out
]

readme = "README.md"
requires-python = ">=3.13,<3.14"

dependencies = [
    "typer",
    "pydantic",
    "loguru"
]

[dependency-groups]


torch-train = [
    "torch~=2.7.1",
    "torchvision",
    "pillow>=10",
    "transformers>=4.55.4",
]

dev = [
    "tqdm",
    "dvc",
    "dvc-s3",
    "pre-commit",
    "mypy",
    "ruff",
    "poethepoet"
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
# qué directorios de código incluir al instalar este projecto como un paquete
packages = ["cow_detect"]



[tool.ruff]
line-length = 100
target-version = "py312"


[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "D",  # pydocstring
]
ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D107", # Missing docstring in __init__
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = [
    # Whitelisted default arguments
    "typer.Option",
    "typer.Argument",
    "fastapi.Header",
    "fastapi.Depends",
    "fastapi.Security"
]

[tool.mypy]
python_version = "3.10"
exclude='^(.venv/|model/|research/)'
disallow_untyped_defs = true
disallow_any_unimported = true
explicit_package_bases = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
show_error_codes = true


[tool.poe.tasks.scan-annots-sky-1]
help="Test annots parsing over all annotations of Sky Dataset 1"
cmd="python cow_detect/utils/annotations.py data/sky/Dataset1/ann/"

[tool.poe.tasks.scan-annots-sky-2]
help="Test annots parsing over all annotations of Sky Dataset 2"
cmd="python cow_detect/utils/annotations.py data/sky/Dataset2/ann/"